/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package org.eclipse.eXXXtreme.ui.contentassist;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.eXXXtreme.tutorial.Query;
import org.eclipse.eXXXtreme.ui.contentassist.AbstractTutorialProposalProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class TutorialProposalProvider extends AbstractTutorialProposalProvider {
  @Inject
  private TypeReferences typeReferences;
  
  @Override
  public void completeJavaTypes(final ContentAssistContext context, final EReference reference, final ICompletionProposalAcceptor acceptor) {
    QualifiedNameValueConverter _qualifiedNameValueConverter = this.getQualifiedNameValueConverter();
    ITypesProposalProvider.Filter _createVisibilityFilter = this.createVisibilityFilter(context);
    this.completeJavaTypes(context, reference, _qualifiedNameValueConverter, _createVisibilityFilter, acceptor);
  }
  
  @Override
  public void completeQuery_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ITypesProposalProvider _typesProposalProvider = this.getTypesProposalProvider();
    JvmType _findDeclaredType = this.typeReferences.findDeclaredType("org.eclipse.eXXXtreme.tutorial.ITable", model);
    ITypesProposalProvider.Filter _canInstantiate = TypeMatchFilters.canInstantiate();
    _typesProposalProvider.createSubTypeProposals(_findDeclaredType, this, context, 
      TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _canInstantiate, acceptor);
  }
  
  @Override
  public void completeJvmParameterizedTypeReference_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final Query query = EcoreUtil2.<Query>getContainerOfType(model, Query.class);
    boolean _notEquals = (!Objects.equal(query, null));
    if (_notEquals) {
      ITypesProposalProvider _typesProposalProvider = this.getTypesProposalProvider();
      JvmType _findDeclaredType = this.typeReferences.findDeclaredType("org.eclipse.eXXXtreme.tutorial.ITable", model);
      ITypesProposalProvider.Filter _canInstantiate = TypeMatchFilters.canInstantiate();
      _typesProposalProvider.createSubTypeProposals(_findDeclaredType, this, context, 
        TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _canInstantiate, acceptor);
    } else {
      super.completeJvmParameterizedTypeReference_Type(model, assignment, context, acceptor);
    }
  }
}
